from aiogram import Router
from aiogram.filters.command import Command
from aiogram.types import Message, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.utils.chat_action import ChatActionSender

from markup import markup
from other import PrimaryState, bot
from view import BitrixView

router = Router()

start_message = f"""
`–ü—Ä–∏–≤–µ—Ç, —Ä–∞–¥–∞ –Ω–æ–≤–æ–º—É –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É!`

–Ø `–ì–∏–ª—å–¥–∏–Ω–∞`üë©, —Ç–≤–æ–π –ª–∏—á–Ω—ã–π
–ø–æ–º–æ—â–Ω–∏–∫-–∫–æ–º–ø–∞–Ω—å–æ–Ω –ø—Ä–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –º–∏—Å—Å–∏–π
_‚Äú–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏‚Äù_. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Å–≤–æ–∏—Ç—å—Å—è –≤ –ì–∏–ª—å–¥–∏–∏
–ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–æ–≤üèØ –∏ —Ä–∞—Å—Å–∫–∞–∂—É –≤—Å–µ, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–Ω–∞—Ç—å.

–ö–≤–µ—Å—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö –º–∏—Å—Å–∏–π, –∫–æ—Ç–æ—Ä—ã–µ
–ø–æ–º–æ–≥—É—Ç —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –ì–∏–ª—å–¥–∏–∏üèØ, —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ
—Å–µ–±–µ –∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –±–ª–∏–∂–µ —Å _–∫–æ–ª–ª–µ–≥–∞–º–∏-–∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞–º–∏_.

–ö—Å—Ç–∞—Ç–∏, –º–æ–∂–µ—à—å –∑–≤–∞—Ç—å –º–µ–Ω—è –ø—Ä–æ—Å—Ç–æ `–ì–∞–ª—è`üë©
"""

who = """
`–ê –∫—Ç–æ –∂–µ —Ç–æ—Ç –≤–æ–∏–Ω, –æ –∫–æ—Ç–æ—Ä–æ–º —Å–∫–∞–ª—å–¥—ã —Å–ª–æ–∂–∞—Ç –ø–µ—Å–Ω–∏?...`

_–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?_
"""


@router.message(Command("start"))
async def start_handler(message: Message, state: FSMContext):
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        try:
            await BitrixView().completion_bitrix(message)
            await message.answer(start_message, parse_mode="Markdown")
            await message.answer_sticker(FSInputFile('data/stickers/hello.png'))
            await message.answer(who,
                                 parse_mode="Markdown",
                                 reply_markup=markup.EMPTY,
                                 input_field_placeholder="–ò–º—è")
            await state.set_state(PrimaryState.getName)
        except:
            await message.answer("–£ –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ø–æ–∑–∂–µ:)")
